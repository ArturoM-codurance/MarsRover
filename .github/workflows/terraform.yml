name: 'Terraform'

on:
  push:
    branches: [ "breaking-things", "main" ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless  whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: shadowJar

      # Initialize a new or existing Terraform  working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Backend Terraform Init
        run: cd terraform && terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Backend Terraform Format
        run: cd terraform && terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Backend Terraform Plan
        run: cd terraform && terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Backend Terraform Apply
        run: cd terraform && terraform apply -auto-approve -input=false

      - name: Backend Obtain lambda URL
        run: cd terraform && echo "invocation_url = terraform output -raw invocation_url" >> "$GITHUB_ENV"

      - name: Frontend generate .env file
        run: cd frontend && echo "${{env.invocation_url}}" > .env

      - name: Frontend build frontend
        run: cd frontend && yarn && yarn build

      - name: FRONTEND Terraform Init
        run: cd frontend && cd terraform && terraform init
#
#      - name: FRONTEND Terraform Format
#        run: cd frontend && cd terraform && terraform fmt -check

      - name: FRONTEND Terraform Plan
        run: cd frontend && cd terraform && terraform plan -input=false

      - name: FRONTEND Terraform Apply
        run: cd frontend && cd terraform && terraform apply -auto-approve -input=false
